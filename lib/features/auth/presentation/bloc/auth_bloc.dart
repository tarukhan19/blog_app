import 'package:blog_app/features/auth/domain/usecases/user_sign_in.dart';
import 'package:blog_app/features/auth/domain/usecases/user_sign_up.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../domain/entity/user.dart';

part 'auth_event.dart';

part 'auth_state.dart';

/*
AuthBloc is the central part of your authentication system using BLoC (Business Logic Component).
It listens to authentication events (AuthEvent) and updates the UI based on authentication states (AuthState).

‚úÖ UserSignUp & UserSignIn are injected into the bloc.
‚úÖ super(AuthInitial()) ‚Üí Sets the initial state as AuthInitial().

‚úÖ on<AuthEvent>((_, emit) => emit(AuthLoading()));

Ensures that any authentication event first emits AuthLoading().
‚úÖ on<AuthSignUp>(_onAuthSignUp);
In Flutter BLoC, on<T>() is a method used to register event handlers inside a BLoC class.
Calls _onAuthSignUp when the AuthSignUp event is triggered.
‚úÖ on<AuthSignIn>(_onAuthSignIn);

Calls _onAuthSignIn when the AuthSignIn event is triggered.

‚úÖ Calls _userSignUp use case with user details (name, email, password).
‚úÖ Uses fold() to handle success or failure:

Failure: Emits AuthFailure(onFailure.message).

Success: Emits AuthSuccess(user)

üî• How It Works in the Authentication Flow
1Ô∏è‚É£ User clicks "Sign Up" or "Sign In" ‚Üí AuthEvent is triggered.
2Ô∏è‚É£ Bloc listens to the event ‚Üí Calls the respective handler (_onAuthSignUp or _onAuthSignIn).
3Ô∏è‚É£ State is updated ‚Üí

If authentication fails ‚Üí AuthFailure state is emitted.

If authentication succeeds ‚Üí AuthSuccess state is emitted.
4Ô∏è‚É£ UI reacts to the state change ‚Üí Displays loading, success, or error message.

 */
class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final UserSignUp _userSignUp;
  final UserSignIn _userSignIn;

  AuthBloc(this._userSignUp, this._userSignIn) : super(AuthInitial()) {
    on<AuthEvent>((_, emit) => emit(AuthLoading()));
    on<AuthSignUp>(_onAuthSignUp);
    on<AuthSignIn>(_onAuthSignIn);
  }

  void _onAuthSignUp(AuthSignUp event, Emitter<AuthState> emit) async {
    final signUpResponse = await _userSignUp(
      UserSignUpParameters(
        emailId: event.emailId,
        password: event.password,
        name: event.name,
      ),
    );
    /*
     fold is a method used in functional programming to handle Either types (from the dart package).
     It allows you to process both success and failure cases in a single operation, making error handling clean and concise.
     */
    signUpResponse.fold(
      (onFailure) => emit(AuthFailure(onFailure.message)),
      (user) => emit(AuthSuccess(user)),
    );
  }

  void _onAuthSignIn(AuthSignIn event, Emitter<AuthState> emit) async {
    final signInResponse = await _userSignIn(
      UserSignInParameters(emailId: event.emailId, password: event.password),
    );

    signInResponse.fold(
      (onFailure) => emit(AuthFailure(onFailure.message)),
      (user) => emit(AuthSuccess(user)),
    );
  }
}
