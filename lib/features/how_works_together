How It Works Together

UI Layer (Presentation) â†’ Sends user actions to BLoC.

BLoC â†’ Calls a Use Case (from Domain Layer).

Use Case â†’ Requests data from the Repository Interface.

Repository Interface â†’ Calls Data Layer to get the actual data.

Data Layer â†’ Fetches data from Supabase (or any other storage).

Data Layer â†’ Sends data back to the Use Case.

Use Case â†’ Returns data to BLoC.

BLoC â†’ Updates UI with new state.

------------------ SOLID Principle --------------------

ðŸ“Œ S - single responsibility
Every class or function must have single responsibility to follow
Each class should have only one reason to change.

You have separated different concerns:

âœ… Entity (User) â†’ Defines the user model.
âœ… Repository (AuthRepository) â†’ Defines authentication operations.
âœ… Use Cases (UserSignIn, UserSignUp) â†’ Implements business logic.
âœ… Data Source (AuthRemoteDataImpl) â†’ Handles API calls via Supabase.
âœ… BLoC (AuthBloc) â†’ Manages UI state based on authentication events.

ðŸ“Œ O - open closed principal
Object or entities should be open for extension but closed for modification

âœ… New features can be added without modifying existing classes:
âœ…If you need to support another authentication method (e.g., Google Sign-In),
we can create a new AuthRemoteDataImpl implementation instead of modifying existing code.
âœ…If you need another form of user storage (e.g., local DB), you can create a separate implementation for AuthRepository.

ðŸ“Œ L - lisk of substitution
Parents classes should be replaceable by their subclasses, that without altering the behaviour
âœ… The data source also follows an interface (AuthRemoteData), so you can replace Supabase with
another backend without changing the rest of the code

ðŸ“Œ I - interface segregation
Classes should not be forced to implement the function of an interface which are not required

ðŸ“Œ D - dependency inversion
We should depend on abstraction not on concretion
âœ… High-level modules should not depend on low-level modules. Both should depend on abstractions.
âœ… AuthBloc does not directly depend on AuthRepositoryImpl but on UserSignUp and UserSignIn
(which in turn depend on AuthRepository).